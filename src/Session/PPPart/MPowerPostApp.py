"""
Принцип аналогичен клиенту.

Заметки (копия заметок клиента):
    *соединение создает класс Connect. Он полность выполняет задачи получени правд доступа и авторизации.
        Он передает классу ClientApp сокет соединения
    * Очередь входящих сообщений хранится в классе ClientApp.
    * ARM - слиент. Расшифровывается как автомотизированная рабочая м...
    * Разобраться как работает соединение в питоне. Как декодировать и кодировать сообщенения.
    * использовать ClientApp как класс констант. То есть обращаться к полям класса, объявленным по умолчанию
    * узнать как получить последние N байт из типа bytes
    * разобрать с доступом к переменным, хранящимся в других модулях.
    * проблема читателей и писателей ПЧиП. Узнать как работают блокировка в питоне.
    * когда закрывать все потоки. После обрыва соединения или как то еще отслеживать это. И кто их будет закрывать?
        заовдить переменную для этого или завершать из класса ClientApp?
    * как очищать очередь сообщений QueueCln? либо установить флаг на удаление и запуститься что то типа сбощика мусора
        или что бы приемник (то есть клиент сам удалял его после прочтения. Здесь одна проблема. Если сообщение нескольким пользователям
        то кто его будет удалять? стоит запустить в классе QueueCln сборщик мусора
    * почитать, как рещают проблемы чиателей и писателей
    * сборщик мусора, который раз в N секунд закрывает очередь, очищает ее и снова открывает
    * расписать, кто может и когда писать и читать очередь сообщений QueueCln.
        Пока пишут туда поток сервера, и каждый клиент при прочтение соообщения (из поля Users сообщения вычитают 1)
    * переименовать Users в Whom
    * ПЧиП разграничение доступа к очереди QueueCln

    * все константы для соединени храняться в классе PPApp

"""
import threading
from threading import Thread
from MAnaliseCachePP import PPAnaliseMessage
from MAnaliseQueuePP import PPAnaliseQueuePP
from MRecvHandler import PPRecvHandle
from MQueuePP import clQueuePP

class PPApp(Thread):
    """
    класс, который создается при подключение нового ПП.
    В него передается сокет, ip и остальные параметры подключения
    """
    RecvHandle      = None
    AnaliseQueueCln = None
    AnaliseCachePP  = None
    socketPP        = None
    ID              = None

    def __init__(self, dictionary):
        """
        создаются все классы и потоки для работы PowerPost
        при создание передается словарь ключ-занчение со всеми переменными для соединения
        :param dictionary: словарь
        """

        # получение значений из словаря

        # инициализация.
        self.RecvHandle       = PPRecvHandle()
        self.AnaliseMessage   = PPAnaliseCachePP()
        self.AnaliseQueueCln  = PPAnaliseQueuePP()
        pass

    def run(self):
        """
        запускает все потоки клиента.
        """
        # запускаются потоки
        self.RecvHandle.start()
        self.AnaliseCachePP.start()
        self.AnaliseQueueCln.start()
        pass



