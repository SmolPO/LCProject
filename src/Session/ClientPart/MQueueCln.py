"""
Класс clnQueueCln

    Задачи:

    * удаление прочитанных сообщений
    * содержит очередь сообщений

    Поток:

    * сборщик мусора


Очередь QueueCln

    Кто и что пишет:

    * GC - удаление обработанных сообщений
    * listenQueue - изменение поля Whom. Отметка о том, что прочитал.
    * analiseMessage - добавляет новые сообщения в очередь в конец
    * QuSvrThread - добавляет новые сообщения в конец

    Кто и откуда читает:

    * все читают с начала. Так как все сообщения добавляются в конец

    Особенности:

    * в начале каждого сообщения добавляется поле Whom (или Users) для отслежки, все ли адресаты прочитали это сообщение
        и может ли его удалить GC
    * возможно можно убрать поле "размер следующего пакета" так как здесь от него смысла нет.

"""

from threading import Thread

class clQueueCln(Thread):
    """
    содердит очередь QueueCln
    содержит поток обработки очереди. аналог сборщика мусора
    узнать, как добавить крит. секцию на очередь.
    """
    QueueCln = []
    TIME_OUT = None
    def __init__(self):
        QueueCln = []

    def run(self):
        """
        запускает анализ очереди сообщений
        для кадого сообщения будет дополнительное поле - для скольких пользователей это сообщение.
        Это поле находится в начале сообщения. Например: QueueCln[n] = [Users = 0, mess]
        эта функция запускается раз в N секунд и проходит по очереди с начала в конец. Если находит Users = 0, то...
        *продумать алгоритм удаления с прерываниями. Проблема читателей и писателей.
        Может сделать "убодрку" очереди раз в N секунд
        :return:
        """
        while True:
            # спать N секунд
            # закрытие очереди для чтения и записи через критическую секцию.
            for i in self.QueueCln:
                if self.QueueCln[i][0] == 0:
                    self.QueueCln.remove(i)
            # открытие крит. секции
